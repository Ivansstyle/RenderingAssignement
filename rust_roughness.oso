OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
surface rust_roughness
param	float	Rin	0		%read{28,28} %write{2147483647,-1}
param	float	roughnessMultiplier	1		%read{2147483647,-1} %write{2147483647,-1}
param	float	noise_level	0.050000001		%read{19,19} %write{2147483647,-1}
param	float	noise_fuzz	0.40000001		%read{24,25} %write{2147483647,-1}
param	float	blend_val	1		%read{27,27} %write{2147483647,-1}
param	color	rust	0.14901961 0.094117649 0.090196081		%read{2147483647,-1} %write{2147483647,-1}
oparam	float	Rout	0		%read{2147483647,-1} %write{28,28}
global	point	P	%read{2,8} %write{2147483647,-1}
global	float	u	%read{6,14} %write{2147483647,-1}
global	float	v	%read{13,16} %write{2147483647,-1}
local	float	full	%read{20,20} %write{0,0}
local	float	s	%read{21,21} %write{6,6}
local	float	t	%read{22,22} %write{13,13}
local	float	noisy_rust	%read{27,27} %write{20,20}
local	float	n	%read{26,28} %write{23,26}
const	float	$const1	1		%read{0,0} %write{2147483647,-1}
temp	float	$tmp1	%read{5,5} %write{4,4}
const	string	$const2	"uperlin"		%read{4,23} %write{2147483647,-1}
temp	point	$tmp2	%read{3,3} %write{2,2}
const	string	$const3	"shader"		%read{2,8} %write{2147483647,-1}
const	string	$const4	"transform"		%read{1,7} %write{2147483647,-1}
const	string	$const5	"common"		%read{2,8} %write{2147483647,-1}
temp	point	$tmp3	%read{4,4} %write{3,3}
const	float	$const7	2		%read{3,9} %write{2147483647,-1}
const	float	$const8	0.2		%read{5,12} %write{2147483647,-1}
temp	float	$tmp4	%read{6,6} %write{5,5}
temp	float	$tmp5	%read{12,12} %write{11,11}
temp	point	$tmp6	%read{9,9} %write{8,8}
temp	point	$tmp7	%read{10,10} %write{9,9}
const	point	$const9	100 100 100		%read{10,10} %write{2147483647,-1}
temp	point	$tmp9	%read{11,11} %write{10,10}
temp	float	$tmp10	%read{13,13} %write{12,12}
temp	float	$tmp11	%read{19,19} %write{18,18}
const	string	$const10	"simplex"		%read{18,18} %write{2147483647,-1}
temp	float	$tmp12	%read{15,15} %write{14,14}
const	float	$const12	10		%read{14,14} %write{2147483647,-1}
temp	float	$tmp13	%read{18,18} %write{15,15}
const	float	$const14	40		%read{15,15} %write{2147483647,-1}
temp	float	$tmp14	%read{17,17} %write{16,16}
const	float	$const16	3		%read{16,21} %write{2147483647,-1}
temp	float	$tmp15	%read{18,18} %write{17,17}
const	float	$const18	30		%read{17,17} %write{2147483647,-1}
temp	float	$tmp16	%read{20,20} %write{19,19}
temp	float	$tmp17	%read{23,23} %write{21,21}
const	float	$const19	0.5		%read{22,22} %write{2147483647,-1}
temp	float	$tmp18	%read{23,23} %write{22,22}
const	float	$const20	0		%read{24,24} %write{2147483647,-1}
temp	float	$tmp19	%read{26,26} %write{24,24}
const	float	$const21	0.15000001		%read{25,25} %write{2147483647,-1}
temp	float	$tmp20	%read{26,26} %write{25,25}
temp	float	$tmp21	%read{28,28} %write{27,27}
code ___main___
# rust_roughness.osl:12
#     float full = 1.0;
	assign		full $const1 	%filename{"rust_roughness.osl"} %line{12} %argrw{"wr"}
# rust_roughness.osl:14
#     float s=u+(float)noise("uperlin",transform("shader",P)*2)*0.2;
	functioncall	$const4 3 	%line{14} %argrw{"r"}
# /opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h:243
# {
	transform	$tmp2 $const5 $const3 P 	%filename{"/opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h"} %line{243} %argrw{"wrrr"}
# rust_roughness.osl:14
#     float s=u+(float)noise("uperlin",transform("shader",P)*2)*0.2;
	mul		$tmp3 $tmp2 $const7 	%filename{"rust_roughness.osl"} %line{14} %argrw{"wrr"}
	noise		$tmp1 $const2 $tmp3 	%argrw{"wrr"}
	mul		$tmp4 $tmp1 $const8 	%argrw{"wrr"}
	add		s u $tmp4 	%argrw{"wrr"}
# rust_roughness.osl:15
#     float t=v+(float)noise("uperlin",transform("shader",P)*2+point(100,100,100))*0.2;
	functioncall	$const4 9 	%line{15} %argrw{"r"}
# /opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h:243
#               output float Kr, output float Kt)
	transform	$tmp6 $const5 $const3 P 	%filename{"/opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h"} %line{243} %argrw{"wrrr"}
# rust_roughness.osl:15
#     float t=v+(float)noise("uperlin",transform("shader",P)*2+point(100,100,100))*0.2;
	mul		$tmp7 $tmp6 $const7 	%filename{"rust_roughness.osl"} %line{15} %argrw{"wrr"}
	add		$tmp9 $tmp7 $const9 	%argrw{"wrr"}
	noise		$tmp5 $const2 $tmp9 	%argrw{"wrr"}
	mul		$tmp10 $tmp5 $const8 	%argrw{"wrr"}
	add		t v $tmp10 	%argrw{"wrr"}
# rust_roughness.osl:17
#     float noisy_rust = full - (float)noise("simplex",(u+10)*40, (v-3)*30)*noise_level; 
	add		$tmp12 u $const12 	%line{17} %argrw{"wrr"}
	mul		$tmp13 $tmp12 $const14 	%argrw{"wrr"}
	sub		$tmp14 v $const16 	%argrw{"wrr"}
	mul		$tmp15 $tmp14 $const18 	%argrw{"wrr"}
	noise		$tmp11 $const10 $tmp13 $tmp15 	%argrw{"wrrr"}
	mul		$tmp16 $tmp11 noise_level 	%argrw{"wrr"}
	sub		noisy_rust full $tmp16 	%argrw{"wrr"}
# rust_roughness.osl:19
#     float n=(float)noise("uperlin",s*3,t*0.5);
	mul		$tmp17 s $const16 	%line{19} %argrw{"wrr"}
	mul		$tmp18 t $const19 	%argrw{"wrr"}
	noise		n $const2 $tmp17 $tmp18 	%argrw{"wrrr"}
# rust_roughness.osl:20
#     n=smoothstep(0.0 + noise_fuzz,0.15 + noise_fuzz,n);
	add		$tmp19 $const20 noise_fuzz 	%line{20} %argrw{"wrr"}
	add		$tmp20 $const21 noise_fuzz 	%argrw{"wrr"}
	smoothstep	n $tmp19 $tmp20 n 	%argrw{"wrrr"}
# rust_roughness.osl:22
#     Rout=mix(noisy_rust * blend_val,Rin,n); // * roughnessMultiplier;
	mul		$tmp21 noisy_rust blend_val 	%line{22} %argrw{"wrr"}
	mix		Rout $tmp21 Rin n 	%argrw{"wrrr"}
	end
